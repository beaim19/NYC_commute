

setwd('D:\\bigquery\\SFbikes')

library(data.table)
library(leaflet)
library(raster)
library(openxlsx)

rm(list = ls())


# 1 - BIG QUERY download data =======================================================
library(readr)
library(bigrquery)
# with dbConnect
library(DBI)

# Authentification: open browser to connect with your acount
bq_auth()



# . 1.a. Green Taxi -----------------------------------------------------------------

# . . Trip data ----
my_billing <- 'bikessf-291307'
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bikessf",
  dataset = "tlc_green_trips_2014",
  billing = my_billing
)

NYCgreen_taxi <- dbGetQuery(
  con, 
  "SELECT vendor_id, pickup_datetime, dropoff_datetime, pickup_longitude,
          dropoff_longitude, pickup_latitude, dropoff_latitude
  FROM `bigquery-public-data.new_york_taxi_trips.tlc_green_trips_2014`"
)

setDT(NYCgreen_taxi)
saveRDS(NYCgreen_taxi, 'NYCgreen_taxi.RDS')


# . . ID locators ----
# Last year of data does not have lat and long for pickup/dropoff
# but the locator ID 
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bikessf",
  dataset = "taxi_zone_geom",
  billing = my_billing
)

NYCgreen_taxi_zones <- dbGetQuery(
  con, 
  "SELECT zone_id, zone_name, zone_geom
  FROM `bigquery-public-data.new_york_taxi_trips.taxi_zone_geom`"
)

saveRDS(NYCgreen_taxi_zones, 'NYCgreen_taxi_zones.RDS')



# . 1.b. Yellow Taxi ----------------------------------------------------------------
# yellow taxi is a big data base, need to do it in chunks
my_billing <- 'bikessf-291307'
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bikessf",
  dataset = "tlc_yellow_trips_2015",
  billing = my_billing
)

options(digits = 10)

for (i in seq(50000001, 60000001, 5000000)){
  
  bq_auth()
  
  tempfile(pattern = 'bikenyc', tmpdir = tempdir())
  print(i)
  
  file_downloaded <- dbGetQuery(
    con, 
    sprintf(paste0("SELECT *
                   FROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2015`
                   LIMIT ", i+4999999, " OFFSET ", i)),
    options(scipen = 20)
    )
  
  setDT(file_downloaded)
  saveRDS(file_downloaded, paste0('NY_TaxTrips_Y2015_', i, '.RDS'))
  print(i)
  file.remove(list.files(tempfile(), full.names = TRUE, pattern = '^RTm'))
}


file_downloaded <- dbGetQuery(
  con, 
  sprintf(paste0("SELECT *
                 FROM `bigquery-public-data.new_york_taxi_trips.tlc_yellow_trips_2015`
                 LIMIT 75000000")),
  options(scipen = 20))



setDT(file_downloaded)
saveRDS(file_downloaded, 'NY_TaxTrips_Y2015_1_75000000.RDS')




# . 1.c. Public Bikes ---------------------------------------------------------------

# . . Trips ----
my_billing <- 'bikessf-291307'
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bikessf",
  dataset = "citibike_trips",
  billing = my_billing
)

NYCgreen_taxi <- dbGetQuery(
  con, 
  "SELECT starttime, stoptime, start_station_id, start_station_latitude, start_station_longitude,
          end_station_id, end_station_latitude, end_station_longitude, usertype, gender
  FROM `bigquery-public-data.new_york_citibike.citibike_trips`"
)

setDT(NYCbikes)
saveRDS(NYCbikes, 'NY_BikeTrips.RDS')


# . . Stations -----
my_billing <- 'bikessf-291307'
con <- dbConnect(
  bigrquery::bigquery(),
  project = "bikessf",
  dataset = "citibike_stations",
  billing = my_billing
)

NYCbike_stations <- dbGetQuery(
  con, 
  "SELECT station_id, latitude, longitude, name
  FROM `bigquery-public-data.new_york_citibike.citibike_stations`"
)

setDT(NYCbike_stations)
saveRDS(NYCbike_stations, 'NYCbike_stations.RDS')


# 2 - MANAGE DATA =============================================================

# . 2.a. Green Taxi ----------------------------------------------------------


# Read Data ________________________________________________
YEAR <- 2018
transp_data <- data.table(readRDS(paste0('NY_TaxTrips_G', YEAR, '.RDS')))

transp_data[,
            yearfile := YEAR]


# Create the time variables ________________________________

# Weekday ~~~~~~~~~~~~~~
myweekdays <- c('Sunday', 'Monday', 'Tuesday',
                'Wednesday', 'Thursday', 'Friday',
                'Saturday')
transp_data[,
            WeekDay := myweekdays[wday(pickup_datetime)]]


# Time of the day ~~~~~~~~~~~~~~~~~~~~
transp_data[hour(pickup_datetime) >= 6 & hour(pickup_datetime) < 12,
            TimeDay := 'Morning'][hour(pickup_datetime) >= 12 & hour(pickup_datetime) < 16,
                                  TimeDay := 'Afternoon'][hour(pickup_datetime) >= 16 & hour(pickup_datetime) < 20,
                                                          TimeDay := 'Evening'][is.na(TimeDay),
                                                                                TimeDay := 'Night']
transp_data[hour(dropoff_datetime) >= 6 & hour(dropoff_datetime) < 12,
            TimeDayDO := 'Morning'][hour(dropoff_datetime) >= 12 & hour(dropoff_datetime) < 16,
                                    TimeDayDO := 'Afternoon'][hour(dropoff_datetime) >= 16 & hour(dropoff_datetime) < 20,
                                                              TimeDayDO := 'Evening'][is.na(TimeDayDO),
                                                                                      TimeDayDO := 'Night']


# Holidays ~~~~~~~~~~~~~~
library(timeDate)
years <- 2014:2018
Easter <- lapply(years, function(x) holiday(x, Holiday = 'GoodFriday'))
Thanksg <- lapply(years, function(x) holiday(x, Holiday = 'USThanksgivingDay'))
BlackFriday <- lapply(Thanksg, function(x) x+24*60*60)
MemDay <- lapply(years, function(x) holiday(x, Holiday = 'USMemorialDay'))
LaborDay <- lapply(years, function(x) holiday(x, Holiday = 'USLaborDay'))
MLKDay <- lapply(years, function(x) holiday(x, Holiday = 'USMLKingsBirthday'))
Christmas <- lapply(years, function(x) holiday(x, Holiday = 'ChristmasDay'))
NYday <- lapply(years, function(x) holiday(x, Holiday = 'NewYearsDay'))
ChristmasEve <- lapply(years, function(x) holiday(x, Holiday = 'ChristmasEve'))
IndpDay <- lapply(years, function(x) holiday(x, Holiday = 'USIndependenceDay'))


holidays <- c(Easter, Thanksg,BlackFriday,
              MemDay, LaborDay,
              MLKDay, Christmas,
              NYday, ChristmasEve,
              IndpDay)

holidays2 <- lapply(holidays, function(x) as(x, 'POSIXct', strict = TRUE))

holidays3 <- do.call('c', holidays2)

holidays4 <- holidays3[!is.na(holidays3)]

transp_data[,
            pickup_datetime2 := as.Date(pickup_datetime)]

transp_data[pickup_datetime2 %in% as.Date(holidays4),
            holiday := 1][is.na(holiday),
                          holiday := 0]

# Working day ~~~~~~~~~~~~~~~~~~~~~~
transp_data[holiday == 1 | WeekDay %in% c('Saturday', 'Sunday'),
            NoWorkDay := 'No Working Day'][is.na(NoWorkDay),
                                           NoWorkDay := 'Working Day']



# Location variables ________________________________________________________________________________

# years 2014 and 2015 don't have the location ID, only the lat and long
# of pick ups and drop offs. Need to bring in the zones for taxis to 
# locate that data with the green taxi zones. 

# package sf
library(sf)

map <- read_sf('geo_export_fcbf8f40-08a1-428c-bf1d-8c44512c5cb3.shp')
st_crs(map)

# Pick Up ___________
# 2016/2017/2018
transp_data[,
            ID := as.character(rownames(transp_data))]

# 2015/2014
pnts_sf <- st_as_sf(transp_data, coords = c('pickup_longitude', 'pickup_latitude'), crs = st_crs(map))

# year 2016 is missing some coordinates
pnts_sf <- st_as_sf(transp_data[!is.na(pickup_longitude) & !is.na(pickup_latitude)], 
                    coords = c('pickup_longitude', 'pickup_latitude'), crs = st_crs(map))

# 2014/2015/2016
intersection = as.integer(unlist(as.character(st_intersects(pnts_sf$geometry, map))))

area = ifelse(is.na(intersection), '', as.numeric(map$location_i[intersection]))

# 2015/2014
transp_data2 <- cbind(transp_data,
                      data.table(pickup_location_id = as.numeric(area)))

# for 2016 ____________
transp_data2 <- cbind(transp_data[!is.na(pickup_longitude) & !is.na(pickup_latitude)],
                      data.table(pickup_location_id = as.numeric(area)))
transp_dataNA <- transp_data[is.na(pickup_longitude) | is.na(pickup_latitude)]
transp_dataNA[,
              pickup_location_id := NA]
transp_data2_bis <- rbind(transp_data2,
                          transp_dataNA)
saveRDS(transp_data2_bis, paste0(YEAR, 'pickup_map.RDS'))
#________________________________________________

saveRDS(transp_data2, paste0(YEAR, 'pickup_map.RDS'))


# Drop off ___________________
pnts_sfDO <- st_as_sf(transp_data, coords = c('dropoff_longitude', 'dropoff_latitude'), crs = st_crs(map))

# year 2016 is missing some coordinates
pnts_sfDO <- st_as_sf(transp_data[!is.na(dropoff_longitude) & !is.na(dropoff_latitude)], 
                      coords = c('dropoff_longitude', 'dropoff_latitude'), crs = st_crs(map))


intersectionDO = as.integer(unlist(as.character(st_intersects(pnts_sfDO$geometry, map))))

areaDO = ifelse(is.na(intersectionDO), '', as.numeric(map$location_i[intersectionDO]))


transp_data3 <- cbind(transp_data2, 
                      data.table(dropoff_location_id = as.numeric(areaDO)))


# for 2016 ____________
transp_data3 <- cbind(transp_data[!is.na(dropoff_longitude) & !is.na(dropoff_latitude)],
                      data.table(dropoff_location_id = as.numeric(areaDO)))
transp_dataDONA <- transp_data[is.na(dropoff_longitude) | is.na(dropoff_latitude)]
transp_dataDONA[,
                dropoff_location_id := NA]
transp_data3_bis <- rbind(transp_data3,
                          transp_dataDONA)
saveRDS(transp_data3_bis, paste0(YEAR, 'dropoff_map.RDS'))
#________________________________________________

# 2014/2015
saveRDS(transp_data3, paste0(YEAR, 'pickup_dropoff_map.RDS'))


# Long Files __________________________________________________________________________________

#  Long files 2014-2015 data _______________

# 2016
read2016PU <- readRDS('2016pickup_map.RDS')
read2016DO <- readRDS('2016dropoff_map.RDS')

setnames(read2016PU, 'pickup_location_id', 'location_id')
setnames(read2016DO, 'dropoff_location_id', 'location_id')

read2016PU[,
           type := 'PU']
read2016DO[,
           type := 'DO']

transp_data3 <- rbind(read2016PU,
                      read2016DO)

#transp_data3 <- copy(transp_data3_bis)

# 2015/2014 pick ups
transp_data_grouped_PU <- transp_data3[,
                                       .N,
                                       by = .(pickup_location_id,
                                              TimeDay,
                                              NoWorkDay)]

transp_data_grouped_PU[, ':='
                       (type = 'Pick Up',
                         year = YEAR)]
setnames(transp_data_grouped_PU, c('pickup_location_id'), 'location_id')


# 2016
transp_data_grouped <- transp_data3[,
                                    .N,
                                    by = .(location_id,
                                           TimeDay,
                                           NoWorkDay,
                                           type)]




# 2015/2014 drop offs

transp_data_grouped_DO <- transp_data3[,
                                       .N,
                                       by = .(dropoff_location_id,
                                              TimeDayDO,
                                              NoWorkDay)]
transp_data_grouped_DO[, ':='
                       (type = 'Drop Off',
                         year = YEAR)]
setnames(transp_data_grouped_DO, c('dropoff_location_id', 'TimeDayDO'), c('location_id', 'TimeDay'))

transp_data_grouped <- rbind(transp_data_grouped_PU,
                             transp_data_grouped_DO)


# 2014/2015/2016
saveRDS(transp_data_grouped, paste0('grouped_GTaxi_', YEAR, '.RDS'))




# Long files 2017-2018 data _______________
saveRDS(transp_data, paste0(YEAR, 'pickup_dropoff_map.RDS'))


transp_data_grouped_PU <- transp_data[,
                                      .N,
                                      by = .(pickup_location_id,
                                             TimeDay,
                                             NoWorkDay,
                                             lubridate::month(pickup_datetime))]

transp_data_grouped_PU[, ':='
                       (type = 'Pick Up',
                         year = YEAR)]
setnames(transp_data_grouped_PU, c('pickup_location_id'), 'location_id')



transp_data_grouped_DO <- transp_data[,
                                      .N,
                                      by = .(dropoff_location_id,
                                             TimeDayDO,
                                             NoWorkDay,
                                             lubridate::month(dropoff_datetime))]
transp_data_grouped_DO[, ':='
                       (type = 'Drop Off',
                         year = YEAR)]
setnames(transp_data_grouped_DO, c('dropoff_location_id', 'TimeDayDO'), c('location_id', 'TimeDay'))

transp_data_grouped <- rbind(transp_data_grouped_PU,
                             transp_data_grouped_DO)

saveRDS(transp_data_grouped, paste0(YEAR, 'TaxiG_month_map.RDS'))



# Put all years together
GT2014 <- readRDS('grouped_GTaxi_2014.RDS')
GT2015 <- readRDS('grouped_GTaxi_2015.RDS')
GT2016 <- readRDS('grouped_GTaxi_2016.RDS')
GT2017 <- readRDS('grouped_GTaxi_2017.RDS')
GT2018 <- readRDS('grouped_GTaxi_2018.RDS')

GT2014 <- readRDS('2014TaxiG_month_map.RDS')
GT2015 <- readRDS('2015TaxiG_month_map.RDS')
GT2016 <- readRDS('2016TaxiG_month_map.RDS')
GT2017 <- readRDS('2017TaxiG_month_map.RDS')
GT2018 <- readRDS('2018TaxiG_month_map.RDS')

GT2014[,
       year := 2014]
GT2015[,
       year := 2015]
GT2017[,
       year := 2017]
GT2018[,
       year := 2018]

GT2016[,
       year := 2016]
GT2016[type == 'PU',
       type := 'Pick Up']
GT2016[type == 'DO',
       type := 'Drop Off']
GT2016[is.na(type)]


head(GT2014)

GgroupedtaxiALL <- rbind(GT2014,
                         GT2015,
                         GT2016,
                         GT2017,
                         GT2018)

# need to add the coordinates of each location id
# get the centroid of the polygons
map$centroid <- st_centroid(map$geometry)

nyc_taxi_zones <- data.table(location_id = map$location_i,
                             centroid = map$centroid)

nyc_taxi_zones[, ':='
               (long = as.numeric(regmatches(centroid, regexpr('(-\\d*\\.\\d+)', centroid, perl = TRUE))),
                 lat = as.numeric(trimws(regmatches(centroid, regexpr('(\\s\\d*\\.\\d+)', centroid, perl = TRUE)))))]

GgroupedtaxiALL[,
                location_id := as.numeric(location_id)]

# map for taxi location ID, 56 and 103 have three different coordinates
# all in the same area. Will select only one record for each
nyc_taxi_zones2 <- nyc_taxi_zones[,
                                  .SD[1],
                                  by = .(location_id)]

GgroupedtaxiALL2 <- merge(GgroupedtaxiALL,
                          subset(nyc_taxi_zones2, select = c(location_id, long, lat)),
                          by = 'location_id',
                          all.x = TRUE)

setnames(GgroupedtaxiALL2, 'lubridate', 'month')

saveRDS(GgroupedtaxiALL2, 'grouped_Gtaxi_ALL_month.RDS')


# an extra step later to add the name of the zone for hovering
taxiG <- readRDS('grouped_Gtaxi_ALL_month.RDS')
nyc_taxi_zonesID <- data.table(read.xlsx('taxi_zones.xlsx'))
nyc_taxi_zonesID2 <- nyc_taxi_zonesID[,
                                  .SD[1],
                                  by = .(LocationID)]
taxiG2 <- merge(taxiG,
                subset(nyc_taxi_zonesID2, select = c(zone, LocationID)),
                by.x = 'location_id',
                by.y = 'LocationID',
                all.x = TRUE)
taxiG2[is.na(zone),
       zone := 'Zone Name Unknown']

taxiG2 <- taxiG2[complete.cases(lat) | 
                           complete.cases(long),]

taxiG2[,
           fullLabel := paste0(zone,': ', N)]

saveRDS(taxiG2, 'grouped_Gtaxi_ALL_complete_month.RDS')





saveRDS(taxisG_map, 'grouped_Gtaxi_ALL_complete.RDS')




# # an extra step later to add month of ride
# taxiG2014 <- readRDS('2014pickup_dropoff_map.RDS')
# taxiG2015 <- readRDS('2015pickup_dropoff_map.RDS')
# taxiG2016PU <- readRDS('2016pickup_map.RDS')
# taxiG2016DO <- readRDS('2016dropoff_map.RDS')
# taxiG2017 <- readRDS('2017pickup_dropoff_map.RDS')
# taxiG2018 <- readRDS('2018pickup_dropoff_map.RDS')
# 
# select_Variables <- c('pickup_datetime', 'dropoff_datetime',
#                       'TimeDay', 'TimeDayDO', 'NoWorkDay',
#                       'yearfile',
#                       'pickup_location_id', 'dropoff_location_id')
# long_map_T <- rbind(subset(taxiG2014, select = select_Variables),
#                     subset(taxiG2015, select = select_Variables),
#                     subset(taxiG2017, select = select_Variables),
#                     subset(taxiG2018, select = select_Variables))
# 
# yearF <- 2016
# 
# taxi_ALL <- data.table()
# for (yearF in c(2014:2015,2017:2018)){
#   
#   long_map_T_PU <- long_map_T[yearfile == yearF,
#                             .N,
#                             by = .(pickup_location_id,
#                                    TimeDay,
#                                    NoWorkDay,
#                                    lubridate::month(pickup_datetime)
#                                    )]
#   long_map_T_PU[, ':='
#                 (type = 'Pick Up')]
#   setnames(long_map_T_PU, c('pickup_location_id'), 'location_id')
#   
#   long_map_T_DO <- long_map_T[yearfile == yearF,
#                               .N,
#                               by = .(dropoff_location_id,
#                                      TimeDayDO,
#                                      NoWorkDay,
#                                      lubridate::month(pickup_datetime))]
#   long_map_T_DO[, ':='
#                 (type = 'Drop Off')]
#   setnames(long_map_T_DO, c('dropoff_location_id', 'TimeDayDO'), 
#            c('location_id', 'TimeDay'))
#   
#   transp_data_groupedY <- rbind(long_map_T_PU,
#                                long_map_T_DO)
#   
#   taxi_ALL <- rbind(taxi_ALL, transp_data_groupedY)
#   
# }
# 
# saveRDS(transp_data_groupedY, 
#         paste0(yearF, 'TaxiG_month_map.RDS'))




# . 2.b. Yellow Taxi ----------------------------------------------------------
# Don't have all the data yet


# . 2.c. Public Bikes ---------------------------------------------------------

nyc_bikes <- data.table(readRDS('NY_BikeTrips.RDS'))

head(nyc_bikes)

# calculate distance
nyc_bikes2 <- nyc_bikes[1:10]

library(geosphere)
nyc_bikes$distance <- distHaversine(nyc_bikes[,c('start_station_longitude', 'start_station_latitude'), with = FALSE], 
                                     nyc_bikes[,c('end_station_longitude', 'end_station_latitude'), with = FALSE])



# get the raw data with missing location
nyc_bikes[,
          yearF := year(starttime)]
NABikeMap_MISS <- nyc_bikes[is.na(start_station_longitude),
                            .N,
                            by = .(yearF)]


# By month ____________________________________________________
sampleNYCbikes3 <- nyc_bikes[,
                             .N,
                             by = .(month(starttime), year(starttime))]

sampleNYCbikes3[!is.na(month),':='
                (month2 = factor(month.name[month],
                                 labels = month.name,
                                 levels = month.name))]

# By time of the day ____________________________________________

# Classiffy the ride in morning/afternoon/evening/night and
# weekeday or weekend/holiday

# Time of the day
nyc_bikes[hour(starttime) >= 6 & hour(starttime) < 12,
          TimeDay := 'Morning'][hour(starttime) >= 12 & hour(starttime) < 16,
                                TimeDay := 'Afternoon'][hour(starttime) >= 16 & hour(starttime) < 20,
                                                        TimeDay := 'Evening'][is.na(TimeDay),
                                                                              TimeDay := 'Night']


# Weekday/Holiday
library(timeDate)

# Weekday
myweekdays <- c('Sunday', 'Monday', 'Tuesday',
                'Wednesday', 'Thursday', 'Friday',
                'Saturday')
nyc_bikes[,
          WeekDay := myweekdays[wday(starttime)]]

nyc_bikes[,
          starttime2 := as.Date(starttime)]

nyc_bikes[starttime2 %in% as.Date(holidays4),
          holiday := 1][is.na(holiday),
                        holiday := 0]

# Working day
nyc_bikes[holiday == 1 | WeekDay %in% c('Saturday', 'Sunday'),
          NoWorkDay := 'No Working Day'][is.na(NoWorkDay),
                                         NoWorkDay := 'Working Day']

# Aggregate by Time of the day, Weekday, and holiday
nyc_bikes_byTime <- nyc_bikes[,
                              .N,
                              by = .(year(starttime), month(starttime),
                                     TimeDay, WeekDay, holiday)]

nyc_bikes_byTime[,
                 month2 := factor(month.name[month],
                                  labels = month.name,
                                  levels = month.name)]


# Map
nyc_bikes_MapPU <- nyc_bikes[,
                             .N,
                             by = .(year(starttime), TimeDay,
                                    holiday, NoWorkDay,
                                    start_station_id, gender, month(starttime))]

nyc_bikes_MapDO <- nyc_bikes[,
                             .N,
                             by = .(year(starttime), TimeDay,
                                    holiday, NoWorkDay,
                                    end_station_id, gender, month(starttime))]

nyc_bikes_MapPU[, ':='
                (type = 'Pick Up',
                  station_id = start_station_id,
                  start_station_id = NULL)]

nyc_bikes_MapDO[, ':='
                (type = 'Drop Off',
                  station_id = end_station_id,
                  end_station_id = NULL)]

nyc_bikes_Map <- rbind(nyc_bikes_MapPU,
                       nyc_bikes_MapDO)

# need to add the long and lat of the stations (from bigquery)

coord_stations <- readRDS('NYCbike_stations.RDS') # this does not have all the stations. 
my_st <- readRDS('my_Stations_id.RDS') # I saved this file with the id from the big file

missingStations <- setdiff(my_st$station_id, coord_stations$station_id)

setnames(my_st, c('lat', 'long'), c('latitude', 'longitude'))

coord_stations2 <- rbind(coord_stations, 
                         my_st[station_id %in% missingStations], fill = TRUE)
coord_stations2[is.na(name),
                name := 'Name unknown']

# for those locations with more than one set of coordinates
coord_stations3 <- coord_stations2[, 
                                   .SD[1],
                                   by = .(station_id)]

nyc_bikes_Map2 <- merge(nyc_bikes_Map,
                        coord_stations3,
                        by = 'station_id',
                        all.x = TRUE)

setnames(nyc_bikes_Map2,
         c('station_id', 'longitude', 'latitude'),
         c('location_id', 'long', 'lat'))

saveRDS(nyc_bikes_Map2, 'NYCbike_Map.RDS') # saved also as NoGender when doing it without gender grouping

# done later, to add the zone
bikeNYC <- readRDS('NYCbike_Map.RDS')
bikeNYC2 <- merge(bikeNYC,
                  subset(coord_stations, select = c(station_id, name)),
                  by.x = 'location_id',
                  by.y = 'station_id',
                  all.x = TRUE)
bikeNYC2[is.na(name),
         name := 'Zone Name Unkown']
setnames(bikeNYC2, 'name', 'zone')

NYCbike_map <- bikeNYC2[complete.cases(lat) | 
                             complete.cases(long),]
NYCbike_map[,
            fullLabel := paste0(zone,': ', N)]

saveRDS(NYCbike_map, 'NYCbike_Map.RDS') # save also as no Gender when doing it without gender grouping

NABikeMap <- data.table(readRDS('NYCbike_Map.RDS'))

my_st <- readRDS('my_Stations_id.RDS')

my_st[, .N, by = .(station_id)][N>1]

# some stations have more than one coordinate, chosing just one for now
my_st2 <- my_st[,
                .SD[1],
                by = .(station_id)]



miss_st <- merge(NABikeMap[is.na(long)],
                 my_st2,
                 by.x = 'location_id',
                 by.y = 'station_id',
                 all.x = TRUE)
miss_st[, 
        c('lat.x', 'long.x') := NULL ]
setnames(miss_st, c('lat.y', 'long.y'), c('lat', 'long'))


all_bike <- rbind(NABikeMap[!is.na(long)],
                  miss_st)

all_bike[is.na(name),
         name := 'Unknown Name']
saveRDS(all_bike, 
        'NYCbike_Map_all_stations.RDS')

# bind taxi and bike data
taxisG_map <- data.table(readRDS('grouped_Gtaxi_ALL_complete_month.RDS'))


taxisG_map[,
           vehicle := 'GTaxi']

NYCbike_map <- data.table(readRDS('NYCbike_Map_month_nogender.RDS'))
NYCbike_map[, ':='
            (vehicle = 'Bike',
              holiday = NULL)]
NYCbike_map <- NYCbike_map[!is.na(lat)]

All_map_data <- rbind(NYCbike_map, 
                      taxisG_map)

saveRDS(All_map_data, 'map_data.Rds')


# Data for day time span graph ======


# Bike ----
# by day of month
nyc_bikes_ridesDayMonth <- nyc_bikes[,
                                     .(RidesDayMonth = .N),
                                     by = .(lubridate::day(starttime), lubridate::month(starttime), yearF, NoWorkDay)]

setnames(nyc_bikes_ridesDayMonth, names(nyc_bikes_ridesDayMonth),
         c('day', 'month', 'year', 'NoWorkDay', 'RidesDayMonth'))

setorder(nyc_bikes_ridesDayMonth, year, month, day)

nyc_bikes_ridesDayMonth2 <- nyc_bikes_ridesDayMonth[!is.na(year) | year == '']


ggplot(data = nyc_bikes_ridesDayMonth2[year == 2013 & 
                                         #NoWorkDay == 'Working Day' & 
                                         month == 12], aes(x = day, 
                                                           y = RidesDayMonth))+
  geom_line(color = 'darkorange')+
  scale_x_continuous(breaks = seq(1, 30, 1))+
  geom_vline(xintercept = nyc_bikes_ridesDayMonth2[year == 2013 & 
                                                     #NoWorkDay == 'Working Day' & 
                                                     month == 12 &
                                                     NoWorkDay == 'No Working Day']$day,
             color = 'darkblue')+
  theme_bw()+
  theme(plot.background = element_blank(), 
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        panel.border = element_blank(),
        axis.line.x.bottom = element_line(color = 'darkgrey'),
        axis.line.y.left = element_line(color = 'darkgrey'),
        panel.grid = element_blank(),
        legend.title = element_blank(),
        axis.title.y = element_blank())


# by time of day
library(lubridate)
nyc_bikes_ridesTimeDay <- nyc_bikes[,
                                    .(RidesTimeDay = .N),
                                    by = .(month(starttime),
                                           day(starttime),
                                           hour(starttime), yearF,
                                           NoWorkDay)]

setorder(nyc_bikes_ridesTimeDay, yearF,
         month, day, hour, NoWorkDay)

nyc_bikes_ridesTimeDay2 <- nyc_bikes_ridesTimeDay[!is.na(yearF)]

nyc_bikes_ridesTimeDay2_WorkDays <- nyc_bikes_ridesTimeDay2[NoWorkDay == 'Working Day',
                                                            .(RidesTimeDayWD = median(RidesTimeDay)),
                                                            by = .(yearF, month, hour)]

ggplot(data = nyc_bikes_ridesTimeDay2_WorkDays[month == 7 & yearF == 2013],
       aes(y = RidesTimeDayWD, x = hour))+
  geom_line()

nyc_bikes_ridesTimeDay2_NOWorkDays <- nyc_bikes_ridesTimeDay2[NoWorkDay == 'No Working Day',
                                                            .(RidesTimeDayWD = median(RidesTimeDay)),
                                                            by = .(yearF, month, hour)]

ggplot(data = nyc_bikes_ridesTimeDay2_NOWorkDays[month == 7 & yearF == 2013],
       aes(y = RidesTimeDayWD, x = hour))+
  geom_line()



# GTaxi ----
# by day of month
# GT_all <- lapply(2014:2018, function(x) data.table(readRDS(paste0('NY_TaxTrips_G', x, '.RDS')))[,
#                                                                                              yearF := x])
# the computer cannot handle this, so do it by year

GT2018_all <- data.table(readRDS(paste0('NY_TaxTrips_G2018.RDS')))
GT2017_all <- data.table(readRDS(paste0('NY_TaxTrips_G2017.RDS')))
GT2016_all <- data.table(readRDS(paste0('NY_TaxTrips_G2016.RDS')))
GT2015_all <- data.table(readRDS(paste0('NY_TaxTrips_G2015.RDS')))
GT2014_all <- data.table(readRDS(paste0('NY_TaxTrips_G2014.RDS')))

GT2018_all[, yearF := 2018]
GT2017_all[, yearF := 2017]
GT2016_all[, yearF := 2016]
GT2015_all[, yearF := 2015]
GT2014_all[, yearF := 2014]

GT_all <- rbind(GT2018_all[, c('pickup_datetime', 'yearF'), with = FALSE],
                GT2017_all[, c('pickup_datetime', 'yearF'), with = FALSE],
                GT2016_all[, c('pickup_datetime', 'yearF'), with = FALSE],
                GT2015_all[, c('pickup_datetime', 'yearF'), with = FALSE],
                GT2014_all[, c('pickup_datetime', 'yearF'), with = FALSE])

# Time of the day
GT_all[hour(pickup_datetime) >= 6 & hour(pickup_datetime) < 12,
          TimeDay := 'Morning'][hour(pickup_datetime) >= 12 & hour(pickup_datetime) < 16,
                                TimeDay := 'Afternoon'][hour(pickup_datetime) >= 16 & hour(pickup_datetime) < 20,
                                                        TimeDay := 'Evening'][is.na(TimeDay),
                                                                              TimeDay := 'Night']


# Weekday
myweekdays <- c('Sunday', 'Monday', 'Tuesday',
                'Wednesday', 'Thursday', 'Friday',
                'Saturday')
GT_all[,
       WeekDay := myweekdays[wday(pickup_datetime)]]


GT_all[,
       pickup_datetime2 := as.Date(pickup_datetime)]
GT_all[pickup_datetime2 %in% as.Date(holidays4),
          holiday := 1][is.na(holiday),
                        holiday := 0]

# Working day
GT_all[holiday == 1 | WeekDay %in% c('Saturday', 'Sunday'),
          NoWorkDay := 'No Working Day'][is.na(NoWorkDay),
                                         NoWorkDay := 'Working Day']



GT_all_ridesDayMonth <- GT_all[,
                               .(RidesDayMonth = .N),
                                by = .(lubridate::day(pickup_datetime), lubridate::month(pickup_datetime), 
                                       yearF, NoWorkDay)]

setnames(GT_all_ridesDayMonth, names(GT_all_ridesDayMonth),
         c('day', 'month', 'year', 'NoWorkDay', 'RidesDayMonth'))

setorder(GT_all_ridesDayMonth, year, month, day)

GT_all_ridesDayMonth2 <- GT_all_ridesDayMonth[!is.na(year) | year == '']


ggplot(data = GT_all_ridesDayMonth2[year == 2014 & 
                                         #NoWorkDay == 'Working Day' & 
                                         month == 12], aes(x = day, 
                                                           y = RidesDayMonth))+
  geom_line(color = 'darkorange')+
  scale_x_continuous(breaks = seq(1, 30, 1))+
  geom_vline(xintercept = GT_all_ridesDayMonth2[year == 2014 & 
                                                     #NoWorkDay == 'Working Day' & 
                                                     month == 12 &
                                                     NoWorkDay == 'No Working Day']$day,
             color = 'darkblue')+
  theme_bw()+
  theme(plot.background = element_blank(), 
        axis.ticks = element_blank(),
        axis.title.x = element_blank(),
        panel.border = element_blank(),
        axis.line.x.bottom = element_line(color = 'darkgrey'),
        axis.line.y.left = element_line(color = 'darkgrey'),
        panel.grid = element_blank(),
        legend.title = element_blank(),
        axis.title.y = element_blank())


# by time of day
library(lubridate)
GT_ridesTimeDay <- GT_all[,
                          .(RidesTimeDay = .N),
                          by = .(month(pickup_datetime),
                                 day(pickup_datetime),
                                 hour(pickup_datetime), yearF,
                                 NoWorkDay)]

setorder(GT_ridesTimeDay, yearF,
         month, day, hour, NoWorkDay)

GT_ridesTimeDay2 <- GT_ridesTimeDay[!is.na(yearF)]

GT_ridesTimeDay2_WorkDays <- GT_ridesTimeDay2[NoWorkDay == 'Working Day',
                                                            .(RidesTimeDayWD = median(RidesTimeDay)),
                                                            by = .(yearF, month, hour)]

ggplot(data = GT_ridesTimeDay2_WorkDays[month == 7 & yearF == 2014],
       aes(y = RidesTimeDayWD, x = hour))+
  geom_line()

GT_ridesTimeDay_NOWorkDays <- GT_ridesTimeDay2[NoWorkDay == 'No Working Day',
                                                              .(RidesTimeDayWD = median(RidesTimeDay)),
                                                              by = .(yearF, month, hour)]

ggplot(data = GT_ridesTimeDay_NOWorkDays[month == 7 & yearF == 2014],
       aes(y = RidesTimeDayWD, x = hour))+
  geom_line()



# Put together Bike and Taxi -----
saveRDS(nyc_bikes_ridesDayMonth2, 'nyc_bikes_ridesDayMonth2.RDS')
nyc_bikes_ridesDayMonth2 <- readRDS('nyc_bikes_ridesDayMonth2.RDS')
nyc_bikes_ridesDayMonth2[, vehicle := 'Bike']
GT_all_ridesDayMonth2[, vehicle := 'GTaxi']

RidesMonth <- rbind(nyc_bikes_ridesDayMonth2,
                    GT_all_ridesDayMonth2)
saveRDS(RidesMonth, 'RidesMonth.RDS')

saveRDS(nyc_bikes_ridesTimeDay2_WorkDays, 'nyc_bikes_ridesTimeDay2_WorkDays.RDS')
nyc_bikes_ridesTimeDay2_WorkDays <- readRDS('nyc_bikes_ridesTimeDay2_WorkDays.RDS')
nyc_bikes_ridesTimeDay2_WorkDays[, vehicle := 'Bike']
GT_ridesTimeDay2_WorkDays[, vehicle := 'GTaxi']

RidesTimeDayWD <- rbind(nyc_bikes_ridesTimeDay2_WorkDays,
                        GT_ridesTimeDay2_WorkDays)
saveRDS(RidesTimeDayWD, 'RidesTimeDayWD.RDS')

saveRDS(nyc_bikes_ridesTimeDay2_NOWorkDays, 'nyc_bikes_ridesTimeDay2_NOWorkDays.RDS')
nyc_bikes_ridesTimeDay2_NOWorkDays <- readRDS('nyc_bikes_ridesTimeDay2_NOWorkDays.RDS')
nyc_bikes_ridesTimeDay2_NOWorkDays[, vehicle := 'Bike']
GT_ridesTimeDay_NOWorkDays[, vehicle := 'GTaxi']

RidesTimeDayNWD <- rbind(nyc_bikes_ridesTimeDay2_NOWorkDays,
                         GT_ridesTimeDay_NOWorkDays)
saveRDS(RidesTimeDayNWD, 'RidesTimeDayNWD.RDS')

rideshourdataWD <- data.table(readRDS('RidesTimeDayWD.RDS'))
rideshourdataNWD <- data.table(readRDS('RidesTimeDayNWD.RDS'))
rideshourdataWD[, WorkingDay := 'Working Day']
rideshourdataNWD[, WorkingDay := 'No Working Day']

rideshourdata <- rbind(rideshourdataWD,
                       rideshourdataNWD)
saveRDS(rideshourdata, 'rideshourdata.RDS')



# New request: distances ============================


# Bike ----
# by day of month
nyc_bikes_ridesDistance <- nyc_bikes[,
                                     .(RidesDistance = median(distance)),
                                     by = .(lubridate::day(starttime), lubridate::month(starttime), yearF, NoWorkDay)]

setnames(nyc_bikes_ridesDistance, names(nyc_bikes_ridesDistance),
         c('day', 'month', 'year', 'NoWorkDay', 'RidesDistance'))

setorder(nyc_bikes_ridesDistance, year, month, day)

nyc_bikes_ridesDistance2 <- nyc_bikes_ridesDistance[!is.na(year) | year == '']

saveRDS(nyc_bikes_ridesDistance2, 'nyc_bikes_ridesDistance2.RDS')


# by time of day
library(lubridate)
nyc_bikes_distanceTimeDay <- nyc_bikes[,
                                    .(DistanceTimeDay = mean(distance)),
                                    by = .(month(starttime),
                                           #day(starttime),
                                           hour(starttime), 
                                           yearF,
                                           NoWorkDay)]

setorder(nyc_bikes_distanceTimeDay, yearF,
         month, hour, NoWorkDay)

nyc_bikes_distanceTimeDay2 <- nyc_bikes_distanceTimeDay[!is.na(yearF)]

saveRDS(nyc_bikes_distanceTimeDay2, 'nyc_bikes_distanceTimeDay2.RDS')



# Taxi ----
GT2018_all <- data.table(readRDS(paste0('NY_TaxTrips_G2018.RDS')))
GT2017_all <- data.table(readRDS(paste0('NY_TaxTrips_G2017.RDS')))
GT2016_all <- data.table(readRDS(paste0('NY_TaxTrips_G2016.RDS')))
GT2015_all <- data.table(readRDS(paste0('NY_TaxTrips_G2015.RDS')))
GT2014_all <- data.table(readRDS(paste0('NY_TaxTrips_G2014.RDS')))


map <- read_sf('geo_export_fcbf8f40-08a1-428c-bf1d-8c44512c5cb3.shp')
map$centroid <- st_centroid(map$geometry)

nyc_taxi_zones <- data.table(location_id = map$location_i,
                             centroid = map$centroid)

nyc_taxi_zones[, ':='
               (long = as.numeric(regmatches(centroid, regexpr('(-\\d*\\.\\d+)', centroid, perl = TRUE))),
                 lat = as.numeric(trimws(regmatches(centroid, regexpr('(\\s\\d*\\.\\d+)', centroid, perl = TRUE)))))]


# map for taxi location ID, 56 and 103 have three different coordinates
# all in the same area. Will select only one record for each
nyc_taxi_zones2 <- nyc_taxi_zones[,
                                  .SD[1],
                                  by = .(location_id)]

GT2018_all[, yearF := 2018]
GT2017_all[, yearF := 2017]
GT2016_all[, yearF := 2016]
GT2015_all[, yearF := 2015]
GT2014_all[, yearF := 2014]

GT_all18_17 <- rbind(GT2018_all[, c('pickup_datetime', 'yearF', 'pickup_location_id', 'dropoff_location_id'), with = FALSE],
                GT2017_all[, c('pickup_datetime', 'yearF', 'pickup_location_id', 'dropoff_location_id'), with = FALSE])

GT_all18_17[,':='
            (pickup_location_id = as.numeric(pickup_location_id),
              dropoff_location_id = as.numeric(dropoff_location_id))]
GT_all18_17_2 <- merge(GT_all18_17,
                       nyc_taxi_zones2,
                       by.x = 'pickup_location_id',
                       by.y = 'location_id',
                       all.x = TRUE)
setnames(GT_all18_17_2, c('long', 'lat'),
         c('pickup_longitude', 'pickup_latitude'))

GT_all18_17_3 <- merge(GT_all18_17_2,
                       nyc_taxi_zones2,
                       by.x = 'dropoff_location_id',
                       by.y = 'location_id',
                       all.x = TRUE)
setnames(GT_all18_17_3, c('long', 'lat'),
         c('dropoff_longitude', 'dropoff_latitude'))



GT_all6_14 <-   rbind(GT2016_all[, c('pickup_datetime', 'yearF', 
                                     'pickup_longitude', 'pickup_latitude',
                                     'dropoff_longitude', 'dropoff_latitude', 'yearF'), with = FALSE],
                GT2015_all[, c('pickup_datetime', 'yearF', 
                               'pickup_longitude', 'pickup_latitude',
                               'dropoff_longitude', 'dropoff_latitude', 'yearF'), with = FALSE],
                GT2014_all[, c('pickup_datetime', 'yearF', 
                               'pickup_longitude', 'pickup_latitude',
                               'dropoff_longitude', 'dropoff_latitude', 'yearF'), with = FALSE])

GT_all <- rbind(GT_all18_17_3[, c('pickup_datetime', 'pickup_longitude', 'pickup_latitude',
                                  'dropoff_longitude', 'dropoff_latitude', 'yearF'), with = FALSE],
                GT_all6_14[, c('pickup_datetime', 'pickup_longitude', 'pickup_latitude',
                                  'dropoff_longitude', 'dropoff_latitude', 'yearF'), with = FALSE])

# Weekday ~~~~~~~~~~~~~~
myweekdays <- c('Sunday', 'Monday', 'Tuesday',
                'Wednesday', 'Thursday', 'Friday',
                'Saturday')
GT_all[,
            WeekDay := myweekdays[wday(pickup_datetime)]]


# Time of the day ~~~~~~~~~~~~~~~~~~~~
GT_all[hour(pickup_datetime) >= 6 & hour(pickup_datetime) < 12,
            TimeDay := 'Morning'][hour(pickup_datetime) >= 12 & hour(pickup_datetime) < 16,
                                  TimeDay := 'Afternoon'][hour(pickup_datetime) >= 16 & hour(pickup_datetime) < 20,
                                                          TimeDay := 'Evening'][is.na(TimeDay),
                                                                                TimeDay := 'Night']



# Holidays ~~~~~~~~~~~~~~
library(timeDate)
years <- 2014:2018
Easter <- lapply(years, function(x) holiday(x, Holiday = 'GoodFriday'))
Thanksg <- lapply(years, function(x) holiday(x, Holiday = 'USThanksgivingDay'))
BlackFriday <- lapply(Thanksg, function(x) x+24*60*60)
MemDay <- lapply(years, function(x) holiday(x, Holiday = 'USMemorialDay'))
LaborDay <- lapply(years, function(x) holiday(x, Holiday = 'USLaborDay'))
MLKDay <- lapply(years, function(x) holiday(x, Holiday = 'USMLKingsBirthday'))
Christmas <- lapply(years, function(x) holiday(x, Holiday = 'ChristmasDay'))
NYday <- lapply(years, function(x) holiday(x, Holiday = 'NewYearsDay'))
ChristmasEve <- lapply(years, function(x) holiday(x, Holiday = 'ChristmasEve'))
IndpDay <- lapply(years, function(x) holiday(x, Holiday = 'USIndependenceDay'))


holidays <- c(Easter, Thanksg,BlackFriday,
              MemDay, LaborDay,
              MLKDay, Christmas,
              NYday, ChristmasEve,
              IndpDay)

holidays2 <- lapply(holidays, function(x) as(x, 'POSIXct', strict = TRUE))

holidays3 <- do.call('c', holidays2)

holidays4 <- holidays3[!is.na(holidays3)]

GT_all[,
       pickup_datetime2 := as.Date(pickup_datetime)]

GT_all[pickup_datetime2 %in% as.Date(holidays4),
            holiday := 1][is.na(holiday),
                          holiday := 0]

# Working day ~~~~~~~~~~~~~~~~~~~~~~
GT_all[holiday == 1 | WeekDay %in% c('Saturday', 'Sunday'),
            NoWorkDay := 'No Working Day'][is.na(NoWorkDay),
                                           NoWorkDay := 'Working Day']



library(geosphere)
GT_all$distance <- distHaversine(GT_all[,c('pickup_longitude', 'pickup_latitude'), with = FALSE], 
                                 GT_all[,c('dropoff_longitude', 'dropoff_latitude'), with = FALSE])





# by day of month
GT_all_ridesDistance <- GT_all[distance > 0,
                               .(RidesDistance = median(distance)),
                               by = .(lubridate::day(pickup_datetime), lubridate::month(pickup_datetime), yearF, NoWorkDay)]

setnames(GT_all_ridesDistance, names(GT_all_ridesDistance),
         c('day', 'month', 'year', 'NoWorkDay', 'RidesDistance'))

setorder(GT_all_ridesDistance, year, month, day)

GT_all_ridesDistance2 <- GT_all_ridesDistance[!is.na(year) | year == '']

saveRDS(GT_all_ridesDistance2, 'GT_all_ridesDistance2.RDS')



# by time of day
library(lubridate)
GT_alls_distanceTimeDay <- GT_all[distance > 0,
                                       .(DistanceTimeDay = median(distance)),
                                       by = .(month(pickup_datetime),
                                              #day(pickup_datetime),
                                              hour(pickup_datetime), yearF,
                                              NoWorkDay)]

setorder(GT_alls_distanceTimeDay, yearF,
         month, hour, NoWorkDay)

GT_alls_distanceTimeDay2 <- GT_alls_distanceTimeDay[!is.na(yearF)]

saveRDS(GT_alls_distanceTimeDay2, 'GT_alls_distanceTimeDay')


# put together bike and taxi
nyc_bikes_distanceTimeDay2 <- readRDS('nyc_bikes_distanceTimeDay2.RDS')
nyc_bikes_ridesDistance2 <- readRDS( 'nyc_bikes_ridesDistance2.RDS')
GT_all_ridesDistance2 <- readRDS('GT_all_ridesDistance2.RDS')
GT_alls_distanceTimeDay2 <- readRDS('GT_alls_distanceTimeDay2.RDS')

distance_time_Data <- rbind(nyc_bikes_distanceTimeDay2[, vehicle := 'Bike'],
                            GT_alls_distanceTimeDay2[, vehicle := 'GTaxi'])
distance_ride <- rbind(nyc_bikes_ridesDistance2[, vehicle := 'Bike'],
                       GT_all_ridesDistance2[, vehicle := 'GTaxi'])

saveRDS(distance_time_Data, 'distance_time_Data.RDS')
saveRDS(distance_ride, 'distance_ride.RDS')

ggplot(data = distance_ride[year == 2015 & vehicle == 'Bike' & month == 7], aes(x = day, y = RidesDistance))+
  geom_line()



